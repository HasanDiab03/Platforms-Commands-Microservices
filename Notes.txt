Microservices:
    Microservices are responsible for doing 1 thing, and doing it well. They are small, typically should require a small team and a small amount of time to be built.
    Let's take for example a monolithic CRM system:
        - very difficult to 'change' the system"
            - changes cycles takes months or years in duration
            - massive of amounts of mostly manual tests.
        - difficult to scale:
            - imaging having for example a black friday, and you just need to scale the ordering part of the app, you can't. you would have to scale the whole app since it's one chunk of code base (monolithic).
        - locked In: in terms of technology stack and third party managers
    So the benefits of Microservices:
        - easier to change & deploy since they are small and decoupled.
        - can be built using different technologies
        - increased organizational ownership & alignmet, as each department in the organization owns the part of the system related to it.
        - reselience, as in 1 service can break, while others can continue to run.
        - scalable, you can scale out only the services that need to be scaled.
        - built to be highly replaceable / swappble.
    
    An Example of a Microservices App:
        An airline decided to go with this architechure, so it has:
            - Flight Catalog Service (.Net & 1 SQL Server instance & team in scotland)
            - Booking Service (Ruby On Rails & 1 PostgreSQL instance & team in USA)
            - Check in service (Node & 1 MongoDb instance & team in india)
        the point is that these services shouldn't share the same DB, but will share data between them (which will be coming up later), and if one of these services breaks down, you can still use the others (for example the check in service may go down, but you can still look at the flight catalog and book, just can't check in).

    Microservices are not all sunshine and rainbows, and monoliths still have there use cases:
        - Microservices: are difficult to implement, need a strong domain knowledge to break down services, and as they are distributed they heavily rely on networks which can slow down and even fail, and even tho we say they are decoupled they are still coupled to something as a microservice that isn't talking to anything is probably not an actual microservice.
        - Monoliths: simpler to implement, can use CI/CD and daily deploys for small changes, it allows you to familiarize yourself with the domain as a whole, and they are not as relining on networks as microservices are.

    Solutions Architechure:
        - In our App, we will be having 2 services:
            - Platform Service with it's own SQL Server (REST API as the interface of it)
            - Command Service with In Memory DB (REST API as the interface of it)
        the End user will be communcating to an API Gateway component instead of directly to one of the services.
        an API Gateway handles routing to specific services, as well as more sophisticated features like rate limiting, authentication, validation, logging, and versioning. it is used to manage and secure API traffic to backend services.
        
        As of write now, what we have is not exactly a microservices architechure, as the 2 services are not aware of each other at all, and don't communicate whatsoever, which is not right since the command service does need data from the platform one.
        1 approach to solve this is using an http client from the platform service to post for example to the command service, but this does create a coupled approach as the platform service has to know where the command platform sits.
        Our Approach will be using asynchronous messaging using RabbitMQ, so the platfrom service will publish an event to the event bus (RabbitMQ) without having to be aware of the command service, while the command service (Subscriber) will receive the message from the event 
        
        In addition , we will be using gRPC, as data might be lost frequently, we need to make sure that the command service is up to date with the platform service, so we can use gRPC to fetch all platforms that the command doesn't already have. note that by using gRPC we are kinda coupling the 2 services together. 

        When using a message bus like RabbitMQ to communicate between microservices, there can still be scenarios where microservices are not fully synchronized or up to date with each other regarding data. Some common reasons include:

        When using a message bus like RabbitMQ to communicate between microservices, there can still be scenarios where microservices are not fully synchronized or up to date with each other regarding data. Some common reasons include:
            1. Message Delivery Delays:
            Network Latency: Messages between microservices might experience delays due to network congestion, routing issues, or latency, resulting in one microservice not receiving updates in real time.
            Message Queuing: If a microservice is slow to process messages, they may accumulate in the queue, causing delays in updates being propagated.
            2. Message Loss:
            Non-Persistent Messages: If messages are not configured to be persistent, they may be lost due to broker crashes, leading to missed updates.
            Consumer Failures: A microservice that fails to acknowledge a message or experiences downtime during message processing may miss an update.

        Eventual Consistency:
            Asynchronous Nature: By design, message-based systems often embrace eventual consistency. This means microservices might not have up-to-date data immediately after a change but will eventually reach consistency. This temporary state of inconsistency is expected in such architectures.
            Trade-Offs: Depending on the business logic and data flows, some services may prioritize availability over immediate consistency, leading to temporary data mismatches.
        
    Platform Service Architechure:
        - We will have both external and internal interfaces:
            - External: the controller, which will accepted synchronized REST based request to the Platform service.
            - Internal: GRPC Server (synchronized - in (requests from command service)), Message Bus (Asynchronous - out (Publisher)), HTTP Client (demonstration of this approach, synchronized - out).
    Command Service Architechure:
        - External: the controller, which will accepted synchronized REST based request to the Platform service.
        - Internal: GRPC Client (synchronized - out (requests to platform service)), Message Bus (Asynchronous - in (Subscriber)).


    Messaging:
        - Synchronous Messaging:
            in short, it's when a client that requests actually waits for the response. Synchronous services usually need to know about each other, which could become cubersome, especially if you you're relying on a bunch of external service (which might change locations).
            now what if we use the 'async' keyword with Http Endpoints ? does that make it an asynchronous messaging ? No, since the 'async' keyword is more related to the management of threads internally of that service. in the context of messaging, a method marked with 'async' is still Synchronous, as the client still needs to wait for the response. All it does is free the thread so that other resources can use it, without blocking other stuff.

            Synchronous communicate can and does happen between services, however it does lead to service being more coupled with each other, as well as potentially leading to something called Long Dependency Chains. Long Dependency Chains is basically when service A calls service B, and service B waits for service C and D, and service D waits for service E. as you can see, if there's a delay in one of those services, all other waiting services will be delayed, due to the large coupling between them.

        - Asynchronous Messaging:
            unlike with Synchronous messaging, here the requester does not wait for the response to finish. It's more like an Event model, for example something like a publish and subscribe event model. it is typically used between services, and utilizes event busses (such as RabbitMQ), so then services no longer need to know about each other, just the bus. The thing is tho, it is more complex than the Synchronous approach.

            The Message bus could be considered a monolith in and of itself. We should treet the message bus with the upmost importance, the same way we do with networking, storage, power, etc... it is recommended to have a cluster of it, multiple instaces running at the same time in case one shuts down. also, services should usually implement some kind of retry policy, in case a message fails to be sent, the service should be smart enough to retry sending it again.  

PVC vs PV vs Storage Classes in Kubernets:
a PV, or Persistent volume, is used to store data for a kubernetes cluster that is indepent of any pod, deployment, node, etc... it remains persistent for the whole cluster.

a PVC, or Persistent Volume claim, is used for a specific deployment to request a persistent storage to use. the requested storage could be speicifically listed, so then it would automatically bind to that PV. or it could use Storage classes to dynamically create a PV for this claim.

a Storage Class is like a template to create PVs whenever they are needed.